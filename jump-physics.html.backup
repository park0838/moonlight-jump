<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jump - Physics Engine</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.19.0/matter.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(180deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            overflow: hidden;
            font-family: 'Consolas', 'Monaco', monospace;
            color: white;
            height: 100vh;
        }

        #game-container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }

        #ui {
            position: fixed;
            top: 20px;
            left: 20px;
            right: 20px;
            z-index: 100;
            display: flex;
            justify-content: space-between;
            font-size: 1.2rem;
        }

        .screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        .screen.hidden {
            display: none;
        }

        .title {
            font-size: 3rem;
            margin-bottom: 30px;
            font-weight: bold;
        }

        .instructions {
            margin-bottom: 40px;
            line-height: 1.8;
        }

        .game-button {
            background: #4834d4;
            border: none;
            color: white;
            font-size: 1.2rem;
            padding: 15px 30px;
            margin: 10px;
            border-radius: 5px;
            cursor: pointer;
            font-family: inherit;
        }

        .game-button:hover {
            background: #3c3096;
        }

        #player {
            position: absolute;
            font-size: 2rem;
            color: #fff;
            font-weight: bold;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
            z-index: 999;
        }

        .platform {
            position: absolute;
            font-family: monospace;
            font-weight: bold;
            font-size: 1.2rem;
            color: #666;
            z-index: 5;
        }

        .platform.spring {
            color: #4CAF50;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="ui">
            <div id="score">Height: <span id="height">0m</span></div>
            <div id="best-score">Best: <span id="best">0m</span></div>
        </div>

        <div id="player">‚óè</div>
        <div id="platforms"></div>

        <!-- Menu Screen -->
        <div id="menu-screen" class="screen">
            <div class="title">JUMP</div>
            <div class="instructions">
                <p>SPACE: Jump</p>
                <p>A/D or Arrow Keys: Move</p>
                <p>Mobile: Tap to jump</p>
            </div>
            <button id="start-button" class="game-button">START</button>
        </div>

        <!-- Game Over Screen -->
        <div id="game-over-screen" class="screen hidden">
            <div class="title" style="color: #ff4757;">GAME OVER</div>
            <div id="final-score" style="font-size: 2rem; margin-bottom: 20px;">Height: <span>0m</span></div>
            <div id="new-record" class="hidden" style="color: #2ed573; font-size: 1.8rem; margin-bottom: 20px;">NEW RECORD</div>
            <button id="restart-button" class="game-button">RESTART</button>
            <button id="menu-button" class="game-button">MENU</button>
        </div>
    </div>

    <script>
        // Matter.js modules
        const { Engine, World, Bodies, Body, Events, Runner } = Matter;

        // Game configuration
        const GAME_CONFIG = {
            jumpPower: 15,
            horizontalSpeed: 8,
            platformGap: 120,
            gameWidth: window.innerWidth,
            gameHeight: window.innerHeight
        };

        // Physics engine
        let engine, world, runner;
        let playerBody;
        let platforms = [];
        let groundSensors = [];

        // Game state
        let gameState = {
            currentState: 'menu',
            camera: { y: 0 },
            score: { height: 0, best: localStorage.getItem('jump-best') || 0 },
            keys: {},
            canJump: false,
            isGameRunning: false
        };

        // DOM elements
        const elements = {
            player: document.getElementById('player'),
            platformsContainer: document.getElementById('platforms'),
            heightScore: document.getElementById('height'),
            bestScore: document.getElementById('best'),
            menuScreen: document.getElementById('menu-screen'),
            gameOverScreen: document.getElementById('game-over-screen'),
            finalScore: document.querySelector('#final-score span'),
            newRecord: document.getElementById('new-record'),
            startButton: document.getElementById('start-button'),
            restartButton: document.getElementById('restart-button'),
            menuButton: document.getElementById('menu-button')
        };

        // Sound system
        function createSound(frequency, duration) {
            if (!window.AudioContext && !window.webkitAudioContext) return null;
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            
            return function() {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
                oscillator.type = 'sine';
                
                gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            };
        }

        const jumpSound = createSound(440, 0.15);
        const landSound = createSound(220, 0.1);

        // Initialize physics engine
        function initPhysics() {
            engine = Engine.create();
            world = engine.world;
            runner = Runner.create();
            
            engine.world.gravity.y = 1;
            engine.world.gravity.x = 0;
            
            // Collision detection
            Events.on(engine, 'collisionStart', function(event) {
                event.pairs.forEach(pair => {
                    const { bodyA, bodyB } = pair;
                    
                    if (bodyA.label === 'player' && bodyB.label === 'ground-sensor') {
                        gameState.canJump = true;
                        if (landSound) landSound();
                    } else if (bodyB.label === 'player' && bodyA.label === 'ground-sensor') {
                        gameState.canJump = true;
                        if (landSound) landSound();
                    }
                    
                    // Spring platform
                    if ((bodyA.label === 'player' && bodyB.label === 'spring') ||
                        (bodyB.label === 'player' && bodyA.label === 'spring')) {
                        setTimeout(() => {
                            if (playerBody && gameState.canJump) {
                                Body.setVelocity(playerBody, { x: playerBody.velocity.x, y: -20 });
                            }
                        }, 100);
                    }
                });
            });
            
            Events.on(engine, 'collisionEnd', function(event) {
                event.pairs.forEach(pair => {
                    const { bodyA, bodyB } = pair;
                    
                    if (bodyA.label === 'player' && bodyB.label === 'ground-sensor') {
                        setTimeout(() => { gameState.canJump = false; }, 100);
                    } else if (bodyB.label === 'player' && bodyA.label === 'ground-sensor') {
                        setTimeout(() => { gameState.canJump = false; }, 100);
                    }
                });
            });
        }

        // Create player
        function createPlayer() {
            const startX = GAME_CONFIG.gameWidth / 2;
            const startY = GAME_CONFIG.gameHeight - 150;
            
            playerBody = Bodies.circle(startX, startY, 15, {
                restitution: 0,
                friction: 0.001,
                frictionAir: 0.01,
                label: 'player'
            });
            
            World.add(world, playerBody);
        }

        // Create platform
        function createPlatform(x, y, type, width) {
            const platformWidth = width * 20;
            const platformHeight = 20;
            
            // Physics body
            const platformBody = Bodies.rectangle(x + platformWidth/2, y + platformHeight/2, platformWidth, platformHeight, {
                isStatic: true,
                label: type === 'spring' ? 'spring' : 'platform'
            });
            
            // Ground sensor (slightly above platform for better detection)
            const sensorBody = Bodies.rectangle(x + platformWidth/2, y - 5, platformWidth, 10, {
                isStatic: true,
                isSensor: true,
                label: 'ground-sensor'
            });
            
            World.add(world, [platformBody, sensorBody]);
            
            // Visual element
            const element = document.createElement('div');
            element.className = `platform ${type}`;
            element.textContent = (type === 'spring' ? '^' : '=').repeat(width);
            element.style.left = x + 'px';
            element.style.top = y + 'px';
            element.style.width = platformWidth + 'px';
            element.style.height = platformHeight + 'px';
            
            elements.platformsContainer.appendChild(element);
            platforms.push({ element, body: platformBody, sensor: sensorBody, x, y });
        }

        // Generate platforms
        function generateInitialPlatforms() {
            // Starting platform
            createPlatform(GAME_CONFIG.gameWidth / 2 - 100, GAME_CONFIG.gameHeight - 100, 'normal', 10);
            
            // Generate platforms going up
            for (let i = 1; i < 50; i++) {
                const x = Math.random() * (GAME_CONFIG.gameWidth - 200) + 100;
                const y = GAME_CONFIG.gameHeight - 100 - (i * GAME_CONFIG.platformGap);
                const type = (i % 8 === 0) ? 'spring' : 'normal';
                const width = Math.random() > 0.5 ? 5 : 4;
                createPlatform(x, y, type, width);
            }
        }

        // Jump function
        function jump() {
            if (gameState.canJump && playerBody) {
                Body.setVelocity(playerBody, { x: playerBody.velocity.x, y: -GAME_CONFIG.jumpPower });
                gameState.canJump = false;
                if (jumpSound) jumpSound();
            }
        }

        // Update player movement
        function updateMovement() {
            if (!playerBody) return;
            
            let forceX = 0;
            if (gameState.keys['ArrowLeft'] || gameState.keys['KeyA']) forceX = -0.01;
            if (gameState.keys['ArrowRight'] || gameState.keys['KeyD']) forceX = 0.01;
            
            if (forceX !== 0) {
                Body.applyForce(playerBody, playerBody.position, { x: forceX, y: 0 });
            }
            
            // Limit horizontal velocity
            if (Math.abs(playerBody.velocity.x) > 8) {
                Body.setVelocity(playerBody, { 
                    x: Math.sign(playerBody.velocity.x) * 8, 
                    y: playerBody.velocity.y 
                });
            }
        }

        // Update camera and visuals
        function updateCamera() {
            if (!playerBody) return;
            
            const targetY = Math.min(0, GAME_CONFIG.gameHeight / 2 - playerBody.position.y);
            gameState.camera.y += (targetY - gameState.camera.y) * 0.1;
            
            // Update player visual position
            elements.player.style.left = (playerBody.position.x - 15) + 'px';
            elements.player.style.top = (playerBody.position.y - 15 + gameState.camera.y) + 'px';
            
            // Update platforms position
            platforms.forEach(platform => {
                platform.element.style.transform = `translateY(${gameState.camera.y}px)`;
            });
        }

        // Update score
        function updateScore() {
            if (!playerBody) return;
            
            const height = Math.max(0, Math.floor((GAME_CONFIG.gameHeight - playerBody.position.y) / 10));
            if (height > gameState.score.height) {
                gameState.score.height = height;
                elements.heightScore.textContent = height + 'm';
            }
            
            // Check game over
            if (playerBody.position.y > GAME_CONFIG.gameHeight + 200) {
                gameOver();
            }
        }

        // Game over
        function gameOver() {
            gameState.isGameRunning = false;
            gameState.currentState = 'gameOver';
            Runner.stop(runner);
            
            elements.finalScore.textContent = gameState.score.height + 'm';
            
            if (gameState.score.height > gameState.score.best) {
                gameState.score.best = gameState.score.height;
                localStorage.setItem('jump-best', gameState.score.best);
                elements.newRecord.classList.remove('hidden');
                elements.bestScore.textContent = 'Best: ' + gameState.score.best + 'm';
            } else {
                elements.newRecord.classList.add('hidden');
            }
            
            elements.gameOverScreen.classList.remove('hidden');
        }

        // Reset game
        function resetGame() {
            if (world) {
                World.clear(world);
                Engine.clear(engine);
            }
            
            gameState.camera.y = 0;
            gameState.score.height = 0;
            gameState.canJump = false;
            platforms = [];
            groundSensors = [];
            
            elements.platformsContainer.innerHTML = '';
            elements.heightScore.textContent = '0m';
        }

        // Start game
        function startGame() {
            gameState.currentState = 'playing';
            elements.menuScreen.classList.add('hidden');
            elements.gameOverScreen.classList.add('hidden');
            
            resetGame();
            createPlayer();
            generateInitialPlatforms();
            
            Runner.run(runner, engine);
            gameState.isGameRunning = true;
            gameLoop();
        }

        // Show menu
        function showMenu() {
            gameState.currentState = 'menu';
            gameState.isGameRunning = false;
            if (runner) Runner.stop(runner);
            elements.menuScreen.classList.remove('hidden');
            elements.gameOverScreen.classList.add('hidden');
        }

        // Game loop
        function gameLoop() {
            if (!gameState.isGameRunning) return;
            
            updateMovement();
            updateCamera();
            updateScore();
            
            requestAnimationFrame(gameLoop);
        }

        // Event listeners
        function setupEventListeners() {
            document.addEventListener('keydown', (e) => {
                if (gameState.keys[e.code]) return;
                gameState.keys[e.code] = true;
                
                if (gameState.currentState === 'playing') {
                    if (e.code === 'Space') {
                        e.preventDefault();
                        jump();
                    }
                }
            });
            
            document.addEventListener('keyup', (e) => {
                gameState.keys[e.code] = false;
            });
            
            document.addEventListener('touchstart', (e) => {
                if (gameState.currentState === 'playing') {
                    e.preventDefault();
                    jump();
                }
            });
            
            elements.startButton.addEventListener('click', startGame);
            elements.restartButton.addEventListener('click', startGame);
            elements.menuButton.addEventListener('click', showMenu);
        }

        // Initialize
        function init() {
            initPhysics();
            setupEventListeners();
            elements.bestScore.textContent = 'Best: ' + gameState.score.best + 'm';
            showMenu();
        }

        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>